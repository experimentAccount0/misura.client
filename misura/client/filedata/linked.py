#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Libreria per il plotting semplice durante l'acquisizione."""
import os
import veusz.dataimport.base as base
from misura.canon import option
from proxy import getFileProxy
import collections

class LinkedMisuraFile(base.LinkedFileBase):
	mtype='LinkedMisuraFile'
	def __init__(self,params):
		base.LinkedFileBase.__init__(self,params)
		self.samples=[]
		"""List of samples contained in this file"""
		self.children=collections.OrderedDict()
		"""Datasets generated by this linked file"""	
		self.prefix=''
		"""Dataset prefix"""
		self.conf=option.ConfigurationProxy()
		"""Additional configuration parameters"""
		self.instr=option.ConfigurationProxy()
		"""Instrument configuration"""
		self.cycle=[]
		"""Thermal cycle"""
		self.header=[]
		"""Available column names"""
		self.name='linkedfile'
		self.instrument=False
		"""Instrument which produced the file"""
		self.title='default'
		"""File title"""
#		self.filename=params.filename
		self.basename=os.path.basename(unicode(params.filename))
		
	def saveToFile(self, fileobj, relpath=None):
		"""Save the link to the document file."""
		params = [repr(self._getSaveFilename(relpath))]
		if self.prefix:
			params.append('prefix=' + repr(self.prefix))
		fileobj.write('Importmisura(%s)\n' % (', '.join(params)))
		
	def createOperation(self):
		"""Returns the operation needed for data reloading"""
		from operation import OperationMisuraImport
		return OperationMisuraImport
	
	def commit(self,doc,name=''):
		"""Save back to summary table."""
		fp=getFileProxy(self.filename)
		colnames=[]
		coldatas=[]
		#FIXME: Should accept document as parameter and recover datasets from it
		datasets=doc.tree[self] # etc, etc....
		datasets=sorted(datasets, key=lambda ds: ds.m_pos)
		for ds in datasets:
			if not ds.m_keep: continue
			print ds, ds.m_col
			colnames.append(ds.m_name)
			coldatas.append(ds.data[:])
		print coldatas
		#FIXME: fp.save_summary(colnames,coldatas,name)
	
		

	


		


